#!/usr/bin/env php
<?php

$autoLoadFiles = [__DIR__ . '/../vendor/autoload.php', __DIR__ . '/../../../autoload.php'];

// Require autoload.php depending on environment
$autoLoadFound = false;
foreach ($autoLoadFiles as $autoLoadFile) {
	if (file_exists($autoLoadFile)) {
		require $autoLoadFile;
		$autoLoadFound = true;
	}
}
// Exit if autoload.php is not required
if (!$autoLoadFound) {
	throw new RuntimeException('Could not find vendor/autoload.php');
}

use GraphQL\Client;
use GraphQL\SchemaGenerator\SchemaClassGenerator;

$options = [
    'auth-type:',
    'endpoint:',
    'auth-header-name::',
    'auth-header-value::',
    'directory::',
];

$options = getopt('', $options);

$authType = $options['auth-type'];
$endpointUrl = $options['endpoint'];

$authHeaders = [];
$authHeaderName = $options['auth-header-name'] ?? null;
$authHeaderValue = $options['auth-header-value'] ?? null;
if (!empty($authHeaderName) && !empty($authHeaderValue)) {
    $authHeaders = [$authHeaderName => $authHeaderValue];
}

$customWriteDir = $options['directory'] ?? '';

$client = new Client(
    $endpointUrl,
    $authHeaders,
    [],
    null,
    'POST',
    $authType
);
$scanner = new SchemaClassGenerator($client, $customWriteDir);

print "-------------------------------------------\n";
print "Generating schema objects from schema types\n";
print "-------------------------------------------\n";

$scanner->generateRootQueryObject();

print "-------------------------------------------\n";
print "Schema objects generation complete\n";
print "-------------------------------------------\n";
