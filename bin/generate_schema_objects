#!/usr/bin/env php
<?php

foreach ([__DIR__.'/../vendor/autoload.php', __DIR__.'/../autoload.php', __DIR__.'/../../../autoload.php'] as $autoload) {
    if (file_exists($autoload)) {
        require_once $autoload;
        break;
    }
}

use GraphQL\Client as GraphQLClient;
use GraphQL\SchemaGenerator\SchemaClassGenerator;
use GraphQL\Util\GuzzleAdapter;
use GuzzleHttp\Client as HttpClient;
use GuzzleHttp\HandlerStack;
use Kevinrob\GuzzleCache\CacheMiddleware;
use Kevinrob\GuzzleCache\KeyValueHttpHeader;
use Kevinrob\GuzzleCache\Storage\Psr6CacheStorage;
use Kevinrob\GuzzleCache\Strategy\PrivateCacheStrategy;
use Psr\Http\Message\RequestInterface;
use Symfony\Component\Cache\Adapter\FilesystemAdapter;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Console\Style\SymfonyStyle;

(new SingleCommandApplication())
    ->addArgument('graphql-endpoint', InputArgument::REQUIRED, 'GraphQL endpoint URL')
    ->addOption('auth-header', null, InputOption::VALUE_REQUIRED, 'Authorization Header Name')
    ->addOption('auth-header-value', null, InputOption::VALUE_REQUIRED, 'Authorization Header Name')
    ->addOption('dir', null, InputOption::VALUE_REQUIRED, 'Custom classes writing dir', '')
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $io = new SymfonyStyle($input, $output);
        $endpoint = $input->getArgument('graphql-endpoint');
        $dir = '';
        $authHeaders = [];

        if ($input->getOption('dir')) {
            $dir = $input->getOption('dir');
        }

        if ($input->getOption('auth-header')) {
            $authHeaders = [$input->getOption('auth-header') => $input->getOption('auth-header-value')];
        }

        // Create default HandlerStack
        $stack = HandlerStack::create();

        // Add this middleware to the top with `push`
        $cacheStorage = new Psr6CacheStorage(new FilesystemAdapter(directory: __DIR__.'/../cache'));
        $cacheStrategy = new class($cacheStorage) extends PrivateCacheStrategy {
            protected function getCacheKey(RequestInterface $request, KeyValueHttpHeader $varyHeaders = null)
            {
                return hash('sha256', $request->getMethod().$request->getUri().$request->getBody());
            }
        };
        $cacheMiddleware = new CacheMiddleware($cacheStrategy);
        $cacheMiddleware->setHttpMethods(['GET' => true, 'POST' => true]);
        $stack->push($cacheMiddleware, 'cache');

        // Initialize the client with the handler option
        $guzzle = new HttpClient(['handler' => $stack]);

        $client = new GraphQLClient(
            endpointUrl: $endpoint,
            authorizationHeaders: $authHeaders,
            httpClient: new GuzzleAdapter($guzzle)
        );

        $scanner = new SchemaClassGenerator($client, $dir);

        $io->block('Generating schema objects from schema types');

        $scanner->generateRootQueryObject();

        $io->block('Schema objects generation complete');
    })
    ->run();
